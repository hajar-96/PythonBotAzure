{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPzWLe0FOAjWyi8w+F8opt5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hajar-96/PythonBotAzure/blob/main/K-means\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Kie6Iy5m44Mw"
      },
      "outputs": [],
      "source": [
        "import seaborn as sn\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np \n",
        "from os.path import join, dirname, abspath\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn import datasets"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "iris = datasets.load_iris()\n",
        "\n",
        "x = iris.data\n",
        "y = iris.target\n",
        "\n",
        "fignum = 1\n",
        "\n",
        "# Plot the ground truthd\n",
        "\n",
        "fig = plt.figure(fignum, figsize=(4, 3))\n",
        "\n",
        "ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)\n",
        "\n",
        "for name, label in [('Zombies', 0),\n",
        "                    ('Programmers', 1),\n",
        "                    ('Vampires', 2)]:\n",
        "    ax.text3D(x[y == label, 3].mean(),\n",
        "              x[y == label, 0].mean(),\n",
        "              x[y == label, 2].mean() + 2, name,\n",
        "              horizontalalignment='center',\n",
        "              bbox=dict(alpha=.2, edgecolor='w', facecolor='w'))\n",
        "\n",
        "# Reorder the labels to have colors matching the cluster results\n",
        "\n",
        "y = np.choose(y, [1, 2, 0]).astype(np.float)\n",
        "ax.scatter(x[:, 3], x[:, 0], x[:, 2], c=y, edgecolor='k')\n",
        "\n",
        "ax.w_xaxis.set_ticklabels([])\n",
        "ax.w_yaxis.set_ticklabels([])\n",
        "ax.w_zaxis.set_ticklabels([])\n",
        "\n",
        "ax.set_xlabel('hates sunlight')\n",
        "ax.set_ylabel('likes garlic')\n",
        "ax.set_zlabel('canine teeth (in)')\n",
        "\n",
        "ax.set_title('')\n",
        "ax.dist = 12\n",
        "\n",
        "# Add code here:\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "jEKpfIUwh2H4",
        "outputId": "b5f7d9b8-4811-4ea3-aaba-69454d2a23a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-fb073c8f1e7f>:25: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  y = np.choose(y, [1, 2, 0]).astype(np.float)\n",
            "<ipython-input-5-fb073c8f1e7f>:28: MatplotlibDeprecationWarning: The w_xaxis attribute was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use xaxis instead.\n",
            "  ax.w_xaxis.set_ticklabels([])\n",
            "<ipython-input-5-fb073c8f1e7f>:29: MatplotlibDeprecationWarning: The w_yaxis attribute was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use yaxis instead.\n",
            "  ax.w_yaxis.set_ticklabels([])\n",
            "<ipython-input-5-fb073c8f1e7f>:30: MatplotlibDeprecationWarning: The w_zaxis attribute was deprecated in Matplotlib 3.1 and will be removed in 3.8. Use zaxis instead.\n",
            "  ax.w_zaxis.set_ticklabels([])\n",
            "<ipython-input-5-fb073c8f1e7f>:37: MatplotlibDeprecationWarning: The dist attribute was deprecated in Matplotlib 3.6 and will be removed two minor releases later.\n",
            "  ax.dist = 12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x300 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "1l3i81nqJIID"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Implementing K-Means: Step 2\n",
        "import seaborn\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import datasets\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "\n",
        "samples = iris.data\n",
        "\n",
        "x = samples[:,0]\n",
        "y = samples[:,1]\n",
        "\n",
        "sepal_length_width = np.array(list(zip(x, y)))\n",
        "\n",
        "# Step 1: Place K random centroids\n",
        "\n",
        "k = 3\n",
        "\n",
        "centroids_x = np.random.uniform(min(x), max(x), size=k)\n",
        "#liste de k valeurs entre min(x) et max(x)\n",
        "centroids_y = np.random.uniform(min(y), max(y), size=k)\n",
        "\n",
        "centroids = np.array(list(zip(centroids_x, centroids_y)))\n",
        "\n",
        "# Step 2: Assign samples to nearest centroid\n",
        "\n",
        "# Distance formula\n",
        "def distance(a,b):\n",
        "  distance=((a[0]-b[0])**2+(a[1]-b[1])**2)**0.5\n",
        "  return distance\n",
        "# Cluster labels for each point (either 0, 1, or 2)\n",
        "labels=np.zeros(len(samples))\n",
        "# Distances to each centroid\n",
        "distances=np.zeros(k)\n",
        "# Assign to the closest centroid\n",
        "for i in range(len(samples)):\n",
        "  distances[0] = distance(sepal_length_width[i], centroids[0])\n",
        "  # same as above for distance to centroids[1]\n",
        "  # same as above for distance to centroids[2]\n",
        "  cluster = np.argmin(distances)\n",
        "  labels[i] = cluster\n",
        "# Print labels\n",
        "print(labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PIed6MVyh-TP",
        "outputId": "6acbaee3-74a9-45c2-c3c9-002894d5ef3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Implementing K-Means: Step 3\n",
        "import seaborn\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import datasets\n",
        "from copy import deepcopy\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "\n",
        "samples = iris.data\n",
        "samples = iris.data\n",
        "\n",
        "x = samples[:,0]\n",
        "y = samples[:,1]\n",
        "\n",
        "sepal_length_width = np.array(list(zip(x, y)))\n",
        "\n",
        "# Step 1: Place K random centroids\n",
        "\n",
        "k = 3\n",
        "\n",
        "centroids_x = np.random.uniform(min(x), max(x), size=k)\n",
        "centroids_y = np.random.uniform(min(y), max(y), size=k)\n",
        "\n",
        "centroids = np.array(list(zip(centroids_x, centroids_y)))\n",
        "\n",
        "# Step 2: Assign samples to nearest centroid\n",
        "\n",
        "def distance(a, b):\n",
        "  one = (a[0] - b[0]) **2\n",
        "  two = (a[1] - b[1]) **2\n",
        "  distance = (one+two) ** 0.5\n",
        "  return distance\n",
        "\n",
        "# Cluster labels for each point (either 0, 1, or 2)\n",
        "labels = np.zeros(len(samples))\n",
        "\n",
        "# Distances to each centroid\n",
        "distances = np.zeros(k)\n",
        "\n",
        "for i in range(len(samples)):\n",
        "  # distance entre point i de sample et les 3 centroides\n",
        "  distances[0] = distance(sepal_length_width[i], centroids[0])\n",
        "  distances[1] = distance(sepal_length_width[i], centroids[1])\n",
        "  distances[2] = distance(sepal_length_width[i], centroids[2])\n",
        "  cluster = np.argmin(distances)\n",
        "  #retourner l'indice de la distance minimale\n",
        "  labels[i] = cluster\n",
        "\n",
        "# Step 3: Update centroids\n",
        "centroids_old = deepcopy(centroids)\n",
        "for i in range(k):\n",
        "  points=[]\n",
        "  for j in range(len(sepal_length_width)):\n",
        "    if labels[j]==i:\n",
        "      points.append(sepal_length_width[j])\n",
        "  centroids[i]=np.mean(points,axis=0)\n",
        "  #the default is to compute the mean of the flattened array. We need the axis=0 here to specify that we want to compute the means along the rows\n",
        "print(centroids_old)\n",
        "print(centroids)\n"
      ],
      "metadata": {
        "id": "umNi1ZHUqroa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50b008f9-cc46-46a2-e546-27174a4b807d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[6.46210544 4.27780537]\n",
            " [7.13489698 3.97834202]\n",
            " [6.17011883 3.12972342]]\n",
            "[[5.55       4.175     ]\n",
            " [7.46666667 3.14166667]\n",
            " [5.70671642 3.01641791]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Implementing K-Means: Step 4\n",
        "#Repeat Steps 2 and 3 until convergence."
      ],
      "metadata": {
        "id": "3WeZSM_QuPfF"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}